//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Demo_EF
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MVCDatabaseEntities1 : DbContext
    {
        public MVCDatabaseEntities1()
            : base("name=MVCDatabaseEntities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Address> Addresses { get; set; }
        public virtual DbSet<Person> People { get; set; }
        public virtual DbSet<Province> Provinces { get; set; }
        public virtual DbSet<ToDo> ToDoes { get; set; }
        public virtual DbSet<UserInfo> UserInfoes { get; set; }
    
        public virtual ObjectResult<GetAllTaskById_Result> GetAllTaskById(ObjectParameter taskid)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllTaskById_Result>("GetAllTaskById", taskid);
        }
    
        public virtual int GetCountByAge(ObjectParameter totalNumber, Nullable<int> aGE)
        {
            var aGEParameter = aGE.HasValue ?
                new ObjectParameter("AGE", aGE) :
                new ObjectParameter("AGE", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetCountByAge", totalNumber, aGEParameter);
        }
    
        public virtual int GetPopulationByProvince(ObjectParameter population, string province)
        {
            var provinceParameter = province != null ?
                new ObjectParameter("Province", province) :
                new ObjectParameter("Province", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetPopulationByProvince", population, provinceParameter);
        }
    
        public virtual int SP_Create_User(string username, string password, string role)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var roleParameter = role != null ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Create_User", usernameParameter, passwordParameter, roleParameter);
        }
    
        public virtual int SP_delete_person(Nullable<int> personID)
        {
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_delete_person", personIDParameter);
        }
    
        public virtual ObjectResult<sp_DeleteAddressByAddressID_Result> sp_DeleteAddressByAddressID(Nullable<int> addressId)
        {
            var addressIdParameter = addressId.HasValue ?
                new ObjectParameter("AddressId", addressId) :
                new ObjectParameter("AddressId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DeleteAddressByAddressID_Result>("sp_DeleteAddressByAddressID", addressIdParameter);
        }
    
        public virtual int sp_DeleteProvinceById(Nullable<int> provinceId)
        {
            var provinceIdParameter = provinceId.HasValue ?
                new ObjectParameter("provinceId", provinceId) :
                new ObjectParameter("provinceId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteProvinceById", provinceIdParameter);
        }
    
        public virtual ObjectResult<SP_get_all_persons_Result> SP_get_all_persons(ObjectParameter personCount)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_get_all_persons_Result>("SP_get_all_persons", personCount);
        }
    
        public virtual ObjectResult<SP_get_person_Result> SP_get_person(Nullable<int> personID)
        {
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_get_person_Result>("SP_get_person", personIDParameter);
        }
    
        public virtual ObjectResult<SP_get_User_Result> SP_get_User(ObjectParameter username, ObjectParameter password)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_get_User_Result>("SP_get_User", username, password);
        }
    
        public virtual ObjectResult<sp_GetAddressByID_Result> sp_GetAddressByID(Nullable<int> addressId)
        {
            var addressIdParameter = addressId.HasValue ?
                new ObjectParameter("AddressId", addressId) :
                new ObjectParameter("AddressId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAddressByID_Result>("sp_GetAddressByID", addressIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_GetAddressCount(ObjectParameter addressCount)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_GetAddressCount", addressCount);
        }
    
        public virtual ObjectResult<sp_GetAddressesByProvince_Result> sp_GetAddressesByProvince(string provinceAbbreviation)
        {
            var provinceAbbreviationParameter = provinceAbbreviation != null ?
                new ObjectParameter("ProvinceAbbreviation", provinceAbbreviation) :
                new ObjectParameter("ProvinceAbbreviation", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAddressesByProvince_Result>("sp_GetAddressesByProvince", provinceAbbreviationParameter);
        }
    
        public virtual ObjectResult<sp_GetProvinceByID_Result> sp_GetProvinceByID(Nullable<int> provinceId)
        {
            var provinceIdParameter = provinceId.HasValue ?
                new ObjectParameter("provinceId", provinceId) :
                new ObjectParameter("provinceId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetProvinceByID_Result>("sp_GetProvinceByID", provinceIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_GetProvinceCount(ObjectParameter provinceCount)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_GetProvinceCount", provinceCount);
        }
    
        public virtual int SP_insert_person(string firstName, string lastName, Nullable<int> age, string emailID, string gender, Nullable<int> addressID)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var ageParameter = age.HasValue ?
                new ObjectParameter("Age", age) :
                new ObjectParameter("Age", typeof(int));
    
            var emailIDParameter = emailID != null ?
                new ObjectParameter("EmailID", emailID) :
                new ObjectParameter("EmailID", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var addressIDParameter = addressID.HasValue ?
                new ObjectParameter("AddressID", addressID) :
                new ObjectParameter("AddressID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_insert_person", firstNameParameter, lastNameParameter, ageParameter, emailIDParameter, genderParameter, addressIDParameter);
        }
    
        public virtual int SP_insert_task(string task_name)
        {
            var task_nameParameter = task_name != null ?
                new ObjectParameter("Task_name", task_name) :
                new ObjectParameter("Task_name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_insert_task", task_nameParameter);
        }
    
        public virtual int SP_update_person(Nullable<int> personID, string firstName, string lastName, Nullable<int> age, string emailID, string gender, Nullable<int> addressID)
        {
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var ageParameter = age.HasValue ?
                new ObjectParameter("Age", age) :
                new ObjectParameter("Age", typeof(int));
    
            var emailIDParameter = emailID != null ?
                new ObjectParameter("EmailID", emailID) :
                new ObjectParameter("EmailID", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var addressIDParameter = addressID.HasValue ?
                new ObjectParameter("AddressID", addressID) :
                new ObjectParameter("AddressID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_update_person", personIDParameter, firstNameParameter, lastNameParameter, ageParameter, emailIDParameter, genderParameter, addressIDParameter);
        }
    
        public virtual ObjectResult<sp_UpdateAddressByAddressID_Result> sp_UpdateAddressByAddressID(Nullable<int> addressId, string address, string city, string postalCode, Nullable<int> provinceID)
        {
            var addressIdParameter = addressId.HasValue ?
                new ObjectParameter("AddressId", addressId) :
                new ObjectParameter("AddressId", typeof(int));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var postalCodeParameter = postalCode != null ?
                new ObjectParameter("PostalCode", postalCode) :
                new ObjectParameter("PostalCode", typeof(string));
    
            var provinceIDParameter = provinceID.HasValue ?
                new ObjectParameter("ProvinceID", provinceID) :
                new ObjectParameter("ProvinceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UpdateAddressByAddressID_Result>("sp_UpdateAddressByAddressID", addressIdParameter, addressParameter, cityParameter, postalCodeParameter, provinceIDParameter);
        }
    
        public virtual int sp_UpdateProvincebyID(Nullable<int> provinceId, string provincename, string provinceabbreviation)
        {
            var provinceIdParameter = provinceId.HasValue ?
                new ObjectParameter("provinceId", provinceId) :
                new ObjectParameter("provinceId", typeof(int));
    
            var provincenameParameter = provincename != null ?
                new ObjectParameter("provincename", provincename) :
                new ObjectParameter("provincename", typeof(string));
    
            var provinceabbreviationParameter = provinceabbreviation != null ?
                new ObjectParameter("provinceabbreviation", provinceabbreviation) :
                new ObjectParameter("provinceabbreviation", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateProvincebyID", provinceIdParameter, provincenameParameter, provinceabbreviationParameter);
        }
    
        public virtual ObjectResult<spGetAllInfoByEmailId_Result> spGetAllInfoByEmailId(string emailId)
        {
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllInfoByEmailId_Result>("spGetAllInfoByEmailId", emailIdParameter);
        }
    
        public virtual ObjectResult<spGetPersonInfoByGender_Result> spGetPersonInfoByGender(string gender)
        {
            var genderParameter = gender != null ?
                new ObjectParameter("gender", gender) :
                new ObjectParameter("gender", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetPersonInfoByGender_Result>("spGetPersonInfoByGender", genderParameter);
        }
    
        public virtual int SpInsertinto_Address(string address, string city, string postalCode, Nullable<int> provinceID)
        {
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var postalCodeParameter = postalCode != null ?
                new ObjectParameter("PostalCode", postalCode) :
                new ObjectParameter("PostalCode", typeof(string));
    
            var provinceIDParameter = provinceID.HasValue ?
                new ObjectParameter("ProvinceID", provinceID) :
                new ObjectParameter("ProvinceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpInsertinto_Address", addressParameter, cityParameter, postalCodeParameter, provinceIDParameter);
        }
    
        public virtual ObjectResult<spInsertIntoAddress_Result> spInsertIntoAddress(string address, string city, string postalCode, Nullable<int> provinceID)
        {
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var postalCodeParameter = postalCode != null ?
                new ObjectParameter("PostalCode", postalCode) :
                new ObjectParameter("PostalCode", typeof(string));
    
            var provinceIDParameter = provinceID.HasValue ?
                new ObjectParameter("ProvinceID", provinceID) :
                new ObjectParameter("ProvinceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spInsertIntoAddress_Result>("spInsertIntoAddress", addressParameter, cityParameter, postalCodeParameter, provinceIDParameter);
        }
    
        public virtual ObjectResult<SpInsertIntoProvince_Result> SpInsertIntoProvince(string provincename, string province)
        {
            var provincenameParameter = provincename != null ?
                new ObjectParameter("provincename", provincename) :
                new ObjectParameter("provincename", typeof(string));
    
            var provinceParameter = province != null ?
                new ObjectParameter("province", province) :
                new ObjectParameter("province", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpInsertIntoProvince_Result>("SpInsertIntoProvince", provincenameParameter, provinceParameter);
        }
    }
}
